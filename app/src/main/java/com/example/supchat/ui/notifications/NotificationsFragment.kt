package com.example.supchat.ui.notifications

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
import com.example.supchat.R
import com.example.supchat.api.ApiClient
import com.example.supchat.models.response.notifications.Notification
import com.example.supchat.models.response.notifications.NotificationsResponse
import com.example.supchat.models.response.notifications.isChannelMessage
import com.example.supchat.models.response.notifications.isPrivateMessage
import com.example.supchat.models.response.notifications.isWorkspaceInvite
import com.example.supchat.ui.home.HomeActivity
import com.google.android.material.floatingactionbutton.FloatingActionButton
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class NotificationsFragment : Fragment() {

    companion object {
        private const val TAG = "NotificationsFragment"

        fun newInstance(): NotificationsFragment {
            return NotificationsFragment()
        }
    }

    // ===== VUES PRINCIPALES =====
    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: NotificationAdapter
    private lateinit var swipeRefreshLayout: SwipeRefreshLayout
    private lateinit var markAllReadFab: FloatingActionButton
    private lateinit var fabRefresh: FloatingActionButton

    // ===== VUES D'√âTAT =====
    private lateinit var emptyStateText: LinearLayout
    private lateinit var loadingState: LinearLayout
    private lateinit var errorState: LinearLayout
    private lateinit var progressBar: ProgressBar

    // ===== VUES DE CONTENU =====
    private lateinit var unreadCountContainer: LinearLayout
    private lateinit var unreadCountText: TextView
    private lateinit var refreshButton: Button
    private lateinit var retryButton: Button
    private lateinit var errorMessage: TextView
    private lateinit var menuButton: ImageView

    // ===== DONN√âES =====
    private var notifications: MutableList<Notification> = mutableListOf()

    // ===== LIFECYCLE =====

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        Log.d(TAG, "üîÑ onCreateView - Cr√©ation du fragment notifications")
        return inflater.inflate(R.layout.fragment_notifications, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Log.d(TAG, "üîÑ onViewCreated - Configuration du fragment")

        try {
            initializeViews(view)
            setupRecyclerView()
            setupSwipeRefresh()
            setupButtons()
            setupFabs()

            // Charger les notifications
            loadNotifications()

            // Test temporaire - supprimez apr√®s test
            // addTestNotifications()

            Log.d(TAG, "‚úÖ Fragment notifications configur√© avec succ√®s")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur configuration fragment", e)
            showErrorState("Erreur lors de l'initialisation: ${e.message}")
        }
    }

    // ===== INITIALISATION DES VUES =====

    private fun initializeViews(view: View) {
        Log.d(TAG, "üîß Initialisation des vues...")

        try {
            // Vues principales
            recyclerView = view.findViewById(R.id.recycler_notifications)
            swipeRefreshLayout = view.findViewById(R.id.swipe_refresh_notifications)
            markAllReadFab = view.findViewById(R.id.fab_mark_all_read)
            fabRefresh = view.findViewById(R.id.fab_refresh)

            // √âtats d'affichage
            emptyStateText = view.findViewById(R.id.empty_state_notifications)
            loadingState = view.findViewById(R.id.loading_state)
            errorState = view.findViewById(R.id.error_state)
            progressBar = view.findViewById(R.id.progress_notifications)

            // Contenus
            unreadCountContainer = view.findViewById(R.id.unread_count_container)
            unreadCountText = view.findViewById(R.id.unread_count_text)
            refreshButton = view.findViewById(R.id.refresh_button)
            retryButton = view.findViewById(R.id.retry_button)
            errorMessage = view.findViewById(R.id.error_message)
            menuButton = view.findViewById(R.id.menu_notifications)

            Log.d(TAG, "‚úÖ Vues initialis√©es avec succ√®s")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur initialisation vues", e)
            throw e
        }
    }

    private fun setupRecyclerView() {
        Log.d(TAG, "üîß Configuration RecyclerView...")

        adapter = NotificationAdapter(
            notifications = notifications,
            onNotificationClick = { notification -> onNotificationClicked(notification) },
            onMarkAsRead = { notification -> markNotificationAsRead(notification.id) }
        )

        recyclerView.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = this@NotificationsFragment.adapter
            setHasFixedSize(true)
        }

        Log.d(TAG, "‚úÖ RecyclerView configur√©")
    }

    private fun setupSwipeRefresh() {
        Log.d(TAG, "üîß Configuration SwipeRefresh...")

        swipeRefreshLayout.apply {
            setOnRefreshListener {
                Log.d(TAG, "üîÑ SwipeRefresh d√©clench√©")
                loadNotifications()
            }

            setColorSchemeResources(
                android.R.color.holo_orange_dark,
                android.R.color.holo_blue_dark,
                android.R.color.holo_green_dark,
                android.R.color.holo_red_dark
            )
        }

        Log.d(TAG, "‚úÖ SwipeRefresh configur√©")
    }

    private fun setupButtons() {
        Log.d(TAG, "üîß Configuration des boutons...")

        // Bouton refresh dans l'√©tat vide
        refreshButton.setOnClickListener {
            Log.d(TAG, "üîÑ Bouton refresh cliqu√©")
            loadNotifications()
        }

        // Bouton retry dans l'√©tat d'erreur
        retryButton.setOnClickListener {
            Log.d(TAG, "üîÑ Bouton retry cliqu√©")
            loadNotifications()
        }

        // Menu options
        menuButton.setOnClickListener {
            Log.d(TAG, "üìã Menu notifications cliqu√©")
            showNotificationsMenu()
        }

        Log.d(TAG, "‚úÖ Boutons configur√©s")
    }

    private fun setupFabs() {
        Log.d(TAG, "üîß Configuration des FABs...")

        // FAB marquer toutes comme lues
        markAllReadFab.setOnClickListener {
            Log.d(TAG, "‚úÖ FAB mark all read cliqu√©")
            markAllNotificationsAsRead()
        }

        // FAB refresh
        fabRefresh.setOnClickListener {
            Log.d(TAG, "üîÑ FAB refresh cliqu√©")
            loadNotifications()
        }

        updateFabVisibility()
        Log.d(TAG, "‚úÖ FABs configur√©s")
    }

    // ===== GESTION DES √âTATS D'AFFICHAGE =====

    private fun showLoadingState() {
        Log.d(TAG, "‚è≥ Affichage √©tat chargement")

        loadingState.visibility = View.VISIBLE
        recyclerView.visibility = View.GONE
        emptyStateText.visibility = View.GONE
        errorState.visibility = View.GONE
        swipeRefreshLayout.isRefreshing = false
    }

    private fun showErrorState(message: String) {
        Log.e(TAG, "‚ùå Affichage √©tat erreur: $message")

        errorState.visibility = View.VISIBLE
        errorMessage.text = message
        recyclerView.visibility = View.GONE
        emptyStateText.visibility = View.GONE
        loadingState.visibility = View.GONE
        swipeRefreshLayout.isRefreshing = false
    }

    private fun showContentState() {
        Log.d(TAG, "üìã Affichage √©tat contenu")

        loadingState.visibility = View.GONE
        errorState.visibility = View.GONE
        swipeRefreshLayout.isRefreshing = false

        if (notifications.isEmpty()) {
            emptyStateText.visibility = View.VISIBLE
            recyclerView.visibility = View.GONE
            Log.d(TAG, "üì≠ Aucune notification - √âtat vide")
        } else {
            emptyStateText.visibility = View.GONE
            recyclerView.visibility = View.VISIBLE
            Log.d(TAG, "üì¨ ${notifications.size} notifications affich√©es")
        }
    }

    // ===== CHARGEMENT DES NOTIFICATIONS =====

    private fun loadNotifications() {
        Log.d(TAG, "=== üîÑ D√âBUT CHARGEMENT NOTIFICATIONS ===")

        val token = requireActivity().getSharedPreferences("SupChatPrefs", android.content.Context.MODE_PRIVATE)
            .getString("auth_token", "") ?: ""

        if (token.isEmpty()) {
            Log.e(TAG, "‚ùå Token manquant")
            (requireActivity() as HomeActivity).redirectToLogin("Session expir√©e")
            return
        }

        Log.d(TAG, "üîë Token pr√©sent: ${token.take(20)}...")
        showLoadingState()

        ApiClient.getNotifications(token)
            .enqueue(object : Callback<NotificationsResponse> {
                override fun onResponse(
                    call: Call<NotificationsResponse>,
                    response: Response<NotificationsResponse>
                ) {
                    Log.d(TAG, "üì° R√©ponse API re√ßue")
                    Log.d(TAG, "üìç URL appel√©e: ${call.request().url}")
                    Log.d(TAG, "üìä Code r√©ponse: ${response.code()}")

                    if (response.isSuccessful) {
                        handleSuccessfulResponse(response)
                    } else {
                        handleErrorResponse(response)
                    }
                }

                override fun onFailure(call: Call<NotificationsResponse>, t: Throwable) {
                    Log.e(TAG, "‚ùå √âchec appel API", t)
                    Log.e(TAG, "üåê URL: ${call.request().url}")

                    val errorMsg = when (t) {
                        is java.net.UnknownHostException -> "üåê Pas de connexion Internet"
                        is java.net.SocketTimeoutException -> "‚è±Ô∏è D√©lai d'attente d√©pass√©"
                        is java.net.ConnectException -> "üîå Impossible de se connecter au serveur"
                        else -> "‚ùå Erreur r√©seau: ${t.message}"
                    }

                    showErrorState(errorMsg)
                }
            })
    }

    private fun handleSuccessfulResponse(response: Response<NotificationsResponse>) {
        try {
            val notificationsResponse = response.body()
            val notificationsList = notificationsResponse?.data?.notifications ?: emptyList()

            Log.d(TAG, "‚úÖ ${notificationsList.size} notifications re√ßues")
            Log.d(TAG, "üìä Body complet: $notificationsResponse")

            // Analyser les notifications re√ßues
            notificationsList.forEachIndexed { index, notif ->
                Log.d(TAG, "[$index] Notification:")
                Log.d(TAG, "  - ID: ${notif.id}")
                Log.d(TAG, "  - Type: ${notif.type}")
                Log.d(TAG, "  - OnModel: ${notif.onModel}")
                Log.d(TAG, "  - Message: ${notif.message}")
                Log.d(TAG, "  - Lu: ${notif.lu}")
                Log.d(TAG, "  - Cr√©√©: ${notif.createdAt}")

                // V√©rifications sp√©cifiques
                when {
                    notif.isPrivateMessage() -> Log.d(TAG, "  ‚úÖ MESSAGE PRIV√â d√©tect√©!")
                    notif.isChannelMessage() -> Log.d(TAG, "  üì∫ Message canal d√©tect√©!")
                    notif.isWorkspaceInvite() -> Log.d(TAG, "  üè¢ Invitation workspace d√©tect√©e!")
                    else -> Log.d(TAG, "  ‚ùì Type inconnu: ${notif.type}")
                }
            }

            // Mettre √† jour les donn√©es
            notifications.clear()
            notifications.addAll(notificationsList.sortedByDescending { it.createdAt })
            adapter.updateNotifications(notifications)

            showContentState()
            updateUnreadCountDisplay()
            updateFabVisibility()

            val unreadCount = notifications.count { !it.lu }
            val privateCount = notifications.count { it.isPrivateMessage() }
            val channelCount = notifications.count { it.isChannelMessage() }

            Log.d(TAG, "üìà R√âSUM√â:")
            Log.d(TAG, "  - Total: ${notifications.size}")
            Log.d(TAG, "  - Non lues: $unreadCount")
            Log.d(TAG, "  - Messages priv√©s: $privateCount")
            Log.d(TAG, "  - Messages canaux: $channelCount")

            updateNotificationBadge(unreadCount)

            Log.d(TAG, "=== ‚úÖ CHARGEMENT TERMIN√â AVEC SUCC√àS ===")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur traitement r√©ponse", e)
            showErrorState("Erreur lors du traitement des donn√©es: ${e.message}")
        }
    }

    private fun handleErrorResponse(response: Response<NotificationsResponse>) {
        val errorBody = response.errorBody()?.string()
        Log.e(TAG, "‚ùå Erreur API: ${response.code()}")
        Log.e(TAG, "üìÑ Error body: $errorBody")
        Log.e(TAG, "üìã Headers: ${response.headers()}")

        val errorMsg = when (response.code()) {
            401 -> {
                Log.e(TAG, "üîê Session expir√©e")
                (requireActivity() as HomeActivity).redirectToLogin("Session expir√©e")
                return
            }
            403 -> "üö´ Acc√®s non autoris√© aux notifications"
            404 -> "üîç Endpoint de notifications non trouv√©\nV√©rifiez l'URL: ${response.raw().request.url}"
            500 -> "üîß Erreur serveur lors du chargement"
            else -> "‚ùå Erreur lors du chargement des notifications (${response.code()})"
        }

        showErrorState(errorMsg)
    }

    // ===== GESTION DES NOTIFICATIONS =====

    private fun markNotificationAsRead(notificationId: String) {
        Log.d(TAG, "‚úÖ Marquage notification comme lue: $notificationId")

        val token = requireActivity().getSharedPreferences("SupChatPrefs", android.content.Context.MODE_PRIVATE)
            .getString("auth_token", "") ?: ""

        if (token.isEmpty()) {
            (requireActivity() as HomeActivity).redirectToLogin("Session expir√©e")
            return
        }

        ApiClient.markNotificationAsRead(token, notificationId)
            .enqueue(object : Callback<NotificationsResponse> {
                override fun onResponse(
                    call: Call<NotificationsResponse>,
                    response: Response<NotificationsResponse>
                ) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "‚úÖ Notification marqu√©e comme lue: $notificationId")

                        adapter.markNotificationAsRead(notificationId)
                        updateUnreadCountDisplay()
                        updateFabVisibility()

                        val unreadCount = adapter.getUnreadCount()
                        updateNotificationBadge(unreadCount)

                        Toast.makeText(requireContext(), "‚úÖ Notification marqu√©e comme lue", Toast.LENGTH_SHORT).show()
                    } else {
                        Log.e(TAG, "‚ùå Erreur marquage: ${response.code()}")
                        Toast.makeText(requireContext(), "‚ùå Erreur lors du marquage", Toast.LENGTH_SHORT).show()
                    }
                }

                override fun onFailure(call: Call<NotificationsResponse>, t: Throwable) {
                    Log.e(TAG, "‚ùå Erreur r√©seau marquage", t)
                    Toast.makeText(requireContext(), "‚ùå Erreur r√©seau", Toast.LENGTH_SHORT).show()
                }
            })
    }

    private fun markAllNotificationsAsRead() {
        Log.d(TAG, "‚úÖ Marquage toutes notifications comme lues")

        val token = requireActivity().getSharedPreferences("SupChatPrefs", android.content.Context.MODE_PRIVATE)
            .getString("auth_token", "") ?: ""

        if (token.isEmpty()) {
            (requireActivity() as HomeActivity).redirectToLogin("Session expir√©e")
            return
        }

        val unreadNotifications = notifications.filter { !it.lu }
        if (unreadNotifications.isEmpty()) {
            Toast.makeText(requireContext(), "üì≠ Aucune notification non lue", Toast.LENGTH_SHORT).show()
            return
        }

        Log.d(TAG, "üìä ${unreadNotifications.size} notifications √† marquer comme lues")

        ApiClient.markAllNotificationsAsRead(token)
            .enqueue(object : Callback<NotificationsResponse> {
                override fun onResponse(
                    call: Call<NotificationsResponse>,
                    response: Response<NotificationsResponse>
                ) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "‚úÖ Toutes les notifications marqu√©es comme lues")
                        loadNotifications()
                        Toast.makeText(requireContext(), "‚úÖ Toutes les notifications marqu√©es comme lues", Toast.LENGTH_SHORT).show()
                    } else {
                        Log.e(TAG, "‚ùå Erreur marquage global: ${response.code()}")
                        Toast.makeText(requireContext(), "‚ùå Erreur lors du marquage", Toast.LENGTH_SHORT).show()
                    }
                }

                override fun onFailure(call: Call<NotificationsResponse>, t: Throwable) {
                    Log.e(TAG, "‚ùå Erreur r√©seau marquage global", t)
                    Toast.makeText(requireContext(), "‚ùå Erreur r√©seau", Toast.LENGTH_SHORT).show()
                }
            })
    }

    // ===== NAVIGATION =====

    private fun onNotificationClicked(notification: Notification) {
        Log.d(TAG, "üëÜ Notification cliqu√©e: ${notification.id}")
        Log.d(TAG, "  Type: ${notification.type}")
        Log.d(TAG, "  Message: ${notification.message}")

        if (!notification.lu) {
            markNotificationAsRead(notification.id)
        }

        when {
            notification.isPrivateMessage() -> {
                Log.d(TAG, "üîÑ Navigation vers message priv√©")
                navigateToPrivateMessage(notification)
            }
            notification.isChannelMessage() -> {
                Log.d(TAG, "üîÑ Navigation vers canal")
                navigateToChannel(notification)
            }
            notification.isWorkspaceInvite() -> {
                Log.d(TAG, "üîÑ Navigation vers workspace")
                navigateToWorkspace(notification)
            }
            else -> {
                Log.w(TAG, "‚ùì Type de notification non g√©r√©: ${notification.type}")
                Toast.makeText(requireContext(), "Type de notification non g√©r√©: ${notification.type}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun navigateToPrivateMessage(notification: Notification) {
        try {
            val homeActivity = requireActivity() as HomeActivity
            homeActivity.supportFragmentManager.beginTransaction()
                .replace(R.id.main_content_container, com.example.supchat.ui.PrivateConversationsListFragment())
                .addToBackStack(null)
                .commit()

            Log.d(TAG, "‚úÖ Navigation vers messages priv√©s r√©ussie")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur navigation message priv√©", e)
            Toast.makeText(requireContext(), "‚ùå Erreur lors de l'ouverture", Toast.LENGTH_SHORT).show()
        }
    }

    private fun navigateToChannel(notification: Notification) {
        try {
            Log.d(TAG, "üì∫ Navigation vers canal: ${notification.reference}")
            Toast.makeText(requireContext(), "üì∫ Navigation vers le canal en cours de d√©veloppement", Toast.LENGTH_SHORT).show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur navigation canal", e)
            Toast.makeText(requireContext(), "‚ùå Erreur lors de l'ouverture", Toast.LENGTH_SHORT).show()
        }
    }

    private fun navigateToWorkspace(notification: Notification) {
        try {
            (requireActivity() as HomeActivity).openWorkspaceManagement()
            Log.d(TAG, "‚úÖ Navigation vers workspace r√©ussie")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur navigation workspace", e)
            Toast.makeText(requireContext(), "‚ùå Erreur lors de l'ouverture", Toast.LENGTH_SHORT).show()
        }
    }

    // ===== MISE √Ä JOUR DE L'INTERFACE =====

    private fun updateUnreadCountDisplay() {
        val unreadCount = notifications.count { !it.lu }

        if (unreadCount > 0) {
            unreadCountContainer.visibility = View.VISIBLE
            unreadCountText.text = unreadCount.toString()
            Log.d(TAG, "üìä Compteur: $unreadCount notifications non lues")
        } else {
            unreadCountContainer.visibility = View.GONE
            Log.d(TAG, "üìä Aucune notification non lue")
        }
    }

    private fun updateFabVisibility() {
        val hasUnreadNotifications = notifications.any { !it.lu }
        markAllReadFab.visibility = if (hasUnreadNotifications) View.VISIBLE else View.GONE

        Log.d(TAG, "üéà FAB mark all read: ${if (hasUnreadNotifications) "visible" else "masqu√©"}")
    }

    private fun updateNotificationBadge(unreadCount: Int) {
        try {
            (requireActivity() as? HomeActivity)?.updateNotificationBadge(unreadCount)
            Log.d(TAG, "üîî Badge mis √† jour: $unreadCount")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur mise √† jour badge", e)
        }
    }

    // ===== MENU ET OPTIONS =====

    private fun showNotificationsMenu() {
        val popupMenu = android.widget.PopupMenu(requireContext(), menuButton)

        popupMenu.menu.add(0, 1, 0, "‚úÖ Marquer toutes comme lues")
        popupMenu.menu.add(0, 2, 0, "üîÑ Actualiser")
        popupMenu.menu.add(0, 3, 0, "üîç Filtrer")
        popupMenu.menu.add(0, 4, 0, "üß™ Ajouter test")
        popupMenu.menu.add(0, 5, 0, "üóëÔ∏è Vider toutes")

        popupMenu.setOnMenuItemClickListener { item ->
            when (item.itemId) {
                1 -> {
                    markAllNotificationsAsRead()
                    true
                }
                2 -> {
                    loadNotifications()
                    true
                }
                3 -> {
                    showFilterOptions()
                    true
                }
                4 -> {
                    addTestNotifications()
                    true
                }
                5 -> {
                    clearAllNotifications()
                    true
                }
                else -> false
            }
        }

        popupMenu.show()
    }

    private fun showFilterOptions() {
        val options = arrayOf("Toutes", "Non lues", "Messages priv√©s", "Canaux", "Invitations")

        androidx.appcompat.app.AlertDialog.Builder(requireContext())
            .setTitle("Filtrer les notifications")
            .setItems(options) { _, which ->
                when (which) {
                    0 -> filterNotifications("all")
                    1 -> filterNotifications("unread")
                    2 -> filterNotifications("private")
                    3 -> filterNotifications("channel")
                    4 -> filterNotifications("invite")
                }
            }
            .show()
    }

    private fun filterNotifications(type: String) {
        val filteredNotifications = when (type) {
            "unread" -> notifications.filter { !it.lu }
            "private" -> notifications.filter { it.isPrivateMessage() }
            "channel" -> notifications.filter { it.isChannelMessage() }
            "invite" -> notifications.filter { it.isWorkspaceInvite() }
            else -> notifications
        }

        adapter.updateNotifications(filteredNotifications)

        Toast.makeText(
            requireContext(),
            "üîç Affichage: ${filteredNotifications.size} notification(s)",
            Toast.LENGTH_SHORT
        ).show()

        Log.d(TAG, "üîç Filtre appliqu√©: $type -> ${filteredNotifications.size} r√©sultats")
    }

    // ===== M√âTHODES DE TEST =====

    private fun addTestNotifications() {
        Log.d(TAG, "üß™ Ajout de notifications de test...")

        val testNotifications = listOf(
            Notification(
                id = "test_private_${System.currentTimeMillis()}",
                utilisateur = "user1",
                type = "message_prive",
                reference = "conv1",
                onModel = "ConversationPrivee",
                message = "üìß Test: Nouveau message priv√© de John Doe",
                lu = false,
                createdAt = "2025-06-15T15:40:40.900Z"
            ),
            Notification(
                id = "test_channel_${System.currentTimeMillis()}",
                utilisateur = "user2",
                type = "canal",
                reference = "canal1",
                onModel = "Canal",
                message = "üì∫ Test: Message dans le canal g√©n√©ral",
                lu = false,
                createdAt = "2025-06-15T15:35:40.900Z"
            ),
            Notification(
                id = "test_invite_${System.currentTimeMillis()}",
                utilisateur = "user3",
                type = "workspace_invite",
                reference = "workspace1",
                onModel = "Workspace",
                message = "üè¢ Test: Invitation au workspace DevTeam",
                lu = false,
                createdAt = "2025-06-15T15:30:40.900Z"
            ),
            Notification(
                id = "test_read_${System.currentTimeMillis()}",
                utilisateur = "user4",
                type = "message_prive",
                reference = "conv2",
                onModel = "ConversationPrivee",
                message = "üìß Test: Message priv√© d√©j√† lu",
                lu = true,
                createdAt = "2025-06-15T15:25:40.900Z"
            )
        )

        notifications.addAll(0, testNotifications)
        adapter.updateNotifications(notifications)
        updateUnreadCountDisplay()
        updateFabVisibility()
        showContentState()

        Toast.makeText(requireContext(), "üß™ ${testNotifications.size} notifications de test ajout√©es", Toast.LENGTH_SHORT).show()
        Log.d(TAG, "‚úÖ Notifications de test ajout√©es: ${testNotifications.size}")
    }

    private fun clearAllNotifications() {
        notifications.clear()
        adapter.updateNotifications(notifications)
        updateUnreadCountDisplay()
        updateFabVisibility()
        showContentState()

        Toast.makeText(requireContext(), "üóëÔ∏è Toutes les notifications supprim√©es", Toast.LENGTH_SHORT).show()
        Log.d(TAG, "üóëÔ∏è Notifications supprim√©es localement")
    }
}